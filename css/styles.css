/* Normalization for browser consistency */
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/**
     * 1. Change the default font family in all browsers (opinionated).
     * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
     */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0; }

/* HTML5 display definitions
       ========================================================================== */
/**
     * Add the correct display in IE <10.
     * Add the correct display in Edge, IE, and Firefox for `details` or `summary`.
     * Add the correct display in IE for `main`.
     */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
     * Add the correct display in IE <10.
     */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
     * Add the correct display and remove excess height in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
     * Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  vertical-align: baseline; }

/**
     * Add the correct display in IE <11, Safari <8, and Firefox <22.
     * 1. Add the correct display in IE.
     */
template,
[hidden] {
  display: none; }

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
     * Remove the outline on focused links when they are also active or hovered
     * in all browsers (opinionated).
     */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Firefox <40.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit; }

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/**
     * Add the correct font style in Android <4.4.
     */
dfn {
  font-style: italic; }

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  /* Set 1 unit of vertical rhythm on the top and bottom margins. */
  margin: 0.75em 0; }

/**
     * Add the correct background and color in IE <10.
     */
mark {
  background-color: #ff0;
  color: #000; }

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%; }

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
       ========================================================================== */
/**
     * Remove the border on images inside links in IE <11.
     */
img {
  border-style: none; }

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
       ========================================================================== */
/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1.5em 40px; }

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

pre {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
       ========================================================================== */
/**
     * Known issues:
     * - By default, Chrome on OS X and Safari on OS X allow very limited styling of
     *   select, unless a border property is set. The default font weight on
     *   optgroup elements cannot safely be changed in Chrome on OSX and Safari on
     *   OS X.
     * - It is recommended that you do not style checkbox and radio inputs as
     *   Firefox's implementation does not respect box-sizing, padding, or width.
     * - Certain font size values applied to number inputs cause the cursor style of
     *   the decrement button to change from default to text.
     * - The search input is not fully stylable by default. In Chrome and Safari on
     *   OSX/iOS you can't control font, padding, border, or background. In Chrome
     *   and Safari on Windows you can't control border properly. It will apply
     *   border-width but will only show a border color (which cannot be controlled)
     *   for the outer 1px of that border. Applying -webkit-appearance: textfield
     *   addresses these issues without removing the benefits of search inputs (e.g.
     *   showing past searches). Safari (but not Chrome) will clip the cancel button
     *   on when it has padding (and textfield appearance).
     */
/**
     * 1. Change font properties to `inherit` in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     * 3. Address `font-family` inconsistency between `textarea` and other form in IE 7
     * 4. Improve appearance and consistency with IE 6/7.
     */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible; }

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none; }

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible; }

/**
     * 1. Add the correct box sizing in IE <11.
     * 2. Remove the padding in IE <11.
     * 3. Remove excess padding in IE 7.
     *    Known issue: excess padding remains in IE 6.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
       */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
     * Correct the text style of placeholders in Chrome, Edge, and Safari.
     */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54; }

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
     * Change the border, margin, and padding in all browsers (opinionated).
     */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     * 4. Correct alignment displayed oddly in IE 6/7.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  white-space: normal;
  /* 1 */
  color: inherit;
  /* 2 */
  padding: 0;
  /* 3 */ }

/**
     * Restore the font weight unset by a previous rule.
     */
optgroup {
  font-weight: bold; }

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto; }

/* Styling tools */
/* Variables and mixins */
/* ------ margins and spacing ------ */
/* ------ breakpoints ------ */
/* ------ colors ------ */
/* ------ fonts ------ */
/* Project Stylesheets */
/*
*  Here are global styles, they do things everywhere
*/
body {
  background-color: #F9F9F9; }

div {
  box-sizing: border-box; }

img {
  width: 100%; }

h1, h2, h3, h4, p {
  color: #363647;
  margin: 0; }

a {
  color: #A1221A;
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-size: 16px;
  margin-top: 0;
  text-decoration: none; }

a:visited {
  text-decoration: none; }

a:hover {
  text-decoration: none; }

p {
  font-family: "Roboto", Verdana, sans-serif;
  font-size: 16px;
  line-height: 1.3; }

h1 {
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-size: 40px;
  font-weight: bold;
  text-transform: uppercase; }

h2 {
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-size: 32px;
  font-weight: bold; }

h3 {
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-size: 26px;
  font-weight: bold; }

h4 {
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-size: 20px;
  font-weight: bold; }

ul, ol {
  margin-top: 0;
  margin-bottom: 0; }

/* ----- Page Layout ------ */
.content-container {
  min-height: 400px; }

/* ----- Portfolio Header ------*/
/* ---- header structure
    .header-container
      .navigation
        .nav-item.nav-name
        .nav-item
*/
.navigation {
  margin-left: 15px;
  margin-right: 15px;
  max-width: 1400px;
  border-bottom: 2px solid #A1221A;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: row wrap;
      flex-flow: row wrap;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }
  @media screen and (min-width: 768px) {
    .navigation {
      margin-right: 4%;
      margin-left: 4%; } }
  @media screen and (min-width: 990px) {
    .navigation {
      margin-right: 8%;
      margin-left: 8%; } }

.nav-item {
  color: #363647;
  font-size: 24px;
  font-family: "Roboto Condensed", Verdana, sans-serif;
  font-weight: bold;
  padding: 0 10px;
  margin: 15px 0;
  text-transform: uppercase; }

.nav-item:not(.nav-name) {
  cursor: pointer; }

.nav-name {
  font-size: 24px;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%; }

@media screen and (max-width: 639px) {
  .nav-name {
    margin-bottom: 0;
    text-align: center; }
  .nav-item:not(:first-of-type):not(:last-of-type) {
    border-right: 2px solid #363647; } }

@media screen and (min-width: 640px) {
  .nav-name {
    font-size: 32px;
    -webkit-box-flex: 1;
        -ms-flex: 1 1 50%;
            flex: 1 1 50%; } }

/* ----- footer ------- */
.footer {
  margin-left: 15px;
  margin-right: 15px;
  max-width: 1400px;
  border-top: 2px solid #A1221A;
  text-align: center; }
  @media screen and (min-width: 768px) {
    .footer {
      margin-right: 4%;
      margin-left: 4%; } }
  @media screen and (min-width: 990px) {
    .footer {
      margin-right: 8%;
      margin-left: 8%; } }

/* ----- Page Layout ------ */
.page-container {
  width: 100%; }

.content-container {
  padding: 15px 0;
  margin-left: 15px;
  margin-right: 15px;
  max-width: 1400px; }
  @media screen and (min-width: 768px) {
    .content-container {
      margin-right: 4%;
      margin-left: 4%; } }
  @media screen and (min-width: 990px) {
    .content-container {
      margin-right: 8%;
      margin-left: 8%; } }

/* ----- Work collection layout ------
      .work-collection
        .work-item
          .work-item-image
          .work-item-content
*/
.work-collection {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: row wrap;
      flex-flow: row wrap;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between; }

.work-item {
  border: 3px solid #C0C0C0;
  background-color: white;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: row wrap;
      flex-flow: row wrap;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%;
  cursor: pointer;
  margin-bottom: 20px; }
  .work-item:hover {
    box-shadow: 0 0 5px 0 #cdcdcd; }
  .work-item .tagline {
    display: none; }
  .work-item h3 {
    margin-bottom: 10px;
    text-align: center; }
  .work-item h4 {
    margin-bottom: 15px;
    text-align: center; }

.work-item.post .tagline {
  display: inline-block; }

.work-item.post .work-item-image {
  display: none; }

.work-item-image {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%;
  width: 100%; }

.work-item-content {
  padding: 15px;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%; }

@media screen and (min-width: 640px) {
  .work-item {
    -webkit-box-flex: 0;
        -ms-flex: 0 1 calc(50% - (2% / 2));
            flex: 0 1 calc(50% - (2% / 2));
    margin-bottom: 2%; }
    .work-item:nth-of-type(2n) {
      margin-right: 2%; } }

@media screen and (min-width: 768px) {
  .work-item {
    -webkit-box-flex: 1;
        -ms-flex: 1 1 calc(30% - 2%);
            flex: 1 1 calc(30% - 2%);
    margin-bottom: 2%; }
    .work-item:not(:nth-of-type(3n)) {
      margin-right: 2%; } }

/* ----- Landing Item Layout ------
  .item-landing-template
    .landing-item
      .landing-top
        .landing-actions
      .landing-image
      .landing-content
        .landing-info
*/
.landing-item {
  border: 3px solid #C0C0C0;
  background-color: white;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: row wrap;
      flex-flow: row wrap;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%; }
  .landing-item h1 {
    margin: 20px 0 10px 0; }
  .landing-item h4 {
    margin-bottom: 40px; }

.landing-top {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%;
  text-align: center; }

.landing-actions {
  margin-bottom: 15px;
  text-align: center; }
  .landing-actions .button {
    margin-bottom: 10px; }

.landing-image {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%; }

.landing-content {
  padding: 15px; }

.landing-info {
  text-align: center; }
  .landing-info p {
    text-align: left;
    margin-bottom: 15px; }

@media screen and (min-width: 768px) {
  .landing-image {
    -webkit-box-flex: 1;
        -ms-flex: 1 1 50%;
            flex: 1 1 50%; }
  .landing-content {
    -webkit-box-flex: 1;
        -ms-flex: 1 1 50%;
            flex: 1 1 50%;
    padding: 0 15px 15px 15px; }
  .back-to-project-collection {
    float: right; } }

/* ----- Landing Post Layout ------
  .item-landing-template
    .landing-post
      .post-content
      .post-actions
*/
.landing-post h1 {
  margin-bottom: 20px;
  text-align: center; }

.landing-post p {
  line-height: 1.3;
  margin-bottom: 20px; }

.landing-post hr {
  width: 40%;
  margin-bottom: 20px; }

.landing-post li {
  line-height: 1.3;
  padding: 0 0 5px 5px; }

.landing-post ol {
  padding-bottom: 15px; }

.landing-post .date {
  text-align: right; }

.landing-post .code {
  background: #E0E0E0;
  border-radius: 2px;
  display: block;
  line-height: 1.3;
  margin: 15px 0;
  padding: 10px; }

.button {
  background: white;
  border: 3px solid #A1221A;
  cursor: pointer;
  display: inline-block;
  padding: 5px 30px;
  text-transform: uppercase;
  text-align: center; }
  .button > * {
    font-family: "Roboto Condensed", Verdana, sans-serif;
    font-weight: bold;
    font-size: 16px;
    text-decoration: none;
    margin: 0; }

/* ----- Portfolio Resume ------*/
/* ---- resume container structure
    .resume-container
      .message
      .left-container
        .resume-section
      .right-container
        .resume-section
*/
.resume-container {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: row wrap;
      flex-flow: row wrap; }
  .resume-container p {
    padding-bottom: 10px; }

.banner {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 100%;
          flex: 1 1 100%;
  margin: 5px 0 20px 0;
  text-align: center; }

@media screen and (min-width: 768px) {
  .banner p {
    margin: 0 auto;
    width: 70%; }
  .left-container {
    border-right: 2px solid #A1221A;
    -webkit-box-flex: 1;
        -ms-flex: 1 1 34%;
            flex: 1 1 34%;
    margin-right: 3%;
    padding-right: 3%; }
  .right-container {
    -webkit-box-flex: 1;
        -ms-flex: 1 1 60%;
            flex: 1 1 60%; }
  .resume-section:first-of-type h4 {
    padding-top: 0; } }

.resume-section {
  margin-bottom: 20px; }
  .resume-section div {
    margin-bottom: 20px; }
  .resume-section h4 {
    margin: 0;
    padding: 15px 0; }
  .resume-section p span:first-of-type {
    font-weight: bold; }
  .resume-section > span:not(:last-of-type)::after {
    content: ',';
    display: inline-block;
    width: 5px;
    height: 1px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
